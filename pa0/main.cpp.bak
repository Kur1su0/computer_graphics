#include<cmath>
#include<eigen3/Eigen/Core>
#include<eigen3/Eigen/Dense>
#include<iostream>
typedef struct Point{
    float x;
    float y;
}Point;

using namespace std;
using namespace Eigen;
int main(){

    // Basic Example of cpp
    std::cout << "Example of cpp \n";
    float a = 1.0, b = 2.0;
    std::cout << a << std::endl;
    std::cout << a/b << std::endl;
    std::cout << std::sqrt(b) << std::endl;
    std::cout << std::acos(-1) << std::endl;
    std::cout << std::sin(30.0/180.0*acos(-1)) << std::endl;

    // Example of vector
    std::cout << "Example of vector \n";
    // vector definition
    Eigen::Vector3f v(1.0f,2.0f,3.0f);
    Eigen::Vector3f w(1.0f,0.0f,0.0f);
    // vector output
    std::cout << "Example of output \n";
    std::cout << v << std::endl;
    // vector add
    std::cout << "Example of add \n";
    std::cout << v + w << std::endl;
    // vector scalar multiply
    std::cout << "Example of scalar multiply \n";
    std::cout << v * 3.0f << std::endl;
    std::cout << 2.0f * v << std::endl;

    // Example of matrix
    std::cout << "Example of matrix \n";
    // matrix definition
    Eigen::Matrix3f i,j;
    i << 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0;
    j << 2.0, 3.0, 1.0, 4.0, 6.0, 5.0, 9.0, 7.0, 8.0;
    // matrix output
    std::cout << "Example of output \n";
    std::cout << i << std::endl;
    // matrix add i + j
    // matrix scalar multiply i * 2.0
    // matrix multiply i * j
    // matrix multiply vector i * v


    //HW0
    //P(2,1) 
    //1. 45 rotation
    //2. then translation to (1,2)
    std::cout <<"P(1,2)"<<std::endl;
    Eigen::Vector2f P(1.0f,2.0f);
    std::cout <<"rotation 45 deg"<<std::endl;
    std::cout<<P<<std::endl;
    float theta= 45*(EIGEN_PI/180);
    Eigen::Matrix2f rotate_matrix;
    rotate_matrix<< cos(theta), -1.0*sin(theta),
                    sin(theta),   cos(theta);

    cout<<rotate_matrix<<endl;
    
    Eigen::Vector2f P_new;
    P_new = rotate_matrix * P;
    cout<<P_new<<endl;
    return 0;
}